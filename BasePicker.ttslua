local BasePicker = {}

function BasePicker:Create()
    local _BasePicker = {}

    _BasePicker.picked_base_obj = nil
    _BasePicker.picked_base_initial_transform = nil

    -- The Rotate event fires while the user has the rotation key or wheel pressed
    -- To detect the start and end, we flag each firing with an id that keeps increasing
    -- The first event firing will be 1, next will be 2. On each of those we will
    -- redraw gizmos after a short delay, but we will only execute end of rotation
    -- after enough time has passed without increasing
    _BasePicker.rotating_id = 0
    _BasePicker.rotating_base_initial_transform = nil

    function _BasePicker:on_object_pickup(player_color, picked_up_object)
        if g_bases[Utils.get_original_name(picked_up_object.getName())] == nil then
            return
        end

        local objs = filter_bases(Player[player_color].getSelectedObjects())
        local n_objs = tlen(objs)
        if n_objs > 1 then
            -- Ignoring this, we don't want to print the circle for more than one unit
            return
        end

        if self.picked_base_obj ~= nil then
            Logger.error("There's already a player picking up an object. Please, wait until he finishes moving.")
            return
        end

        self.picked_base_obj = picked_up_object
        self.picked_base_initial_transform = calculate_transform(picked_up_object)

        draw_all_gizmos()
    end

    function _BasePicker:on_object_rotate(obj, spin, flip, player_color, old_spin, old_flip)
        if g_bases[Utils.get_original_name(obj.getName())] == nil then
            return
        end

        if self.picked_base_obj ~= nil then
            return
        end

        if self.rotating_id == 0 then
            self.rotating_base_initial_transform = calculate_transform(obj)
        end
        self.rotating_id = self.rotating_id + 1
        local id = self.rotating_id

        Wait.time(function()
            if id == self.rotating_id then
                self:on_object_rotate_end(obj, self.rotating_base_initial_transform)
                self.rotating_id = 0
                self.rotating_base_initial_transform = nil
            end
            draw_all_gizmos()
        end, 0.5)
    end

    function _BasePicker:on_object_rotate_end(obj, initial_transform)
        local new_transform = calculate_transform(obj)
        local move = {}
        History.add_transform_to_move(move, obj.getName(), initial_transform, new_transform)
        History.push_to_history_stack(move)
    end

    function _BasePicker:on_object_drop(player_color, picked_up_object)
        local obj_name = picked_up_object.getName()
        if (str_has_substr(obj_name, 'Waterway')) then
            TerrainManager:snap_waterway(picked_up_object)
        elseif (str_has_substr(obj_name, 'Road')) then
            TerrainManager:snap_road(picked_up_object)
        end

        if g_bases[Utils.get_original_name(obj_name)] == nil then
            return
        end

        local objs = filter_bases(Player[player_color].getSelectedObjects())
        local n_objs = tlen(objs)
        if n_objs > 1 then
            picked_up_object.setVelocity({x = 0, y = 0, z = 0})
            picked_up_object.setAngularVelocity({x = 0, y = 0, z = 0})
            draw_all_gizmos()
            return
        end

        if self.picked_base_obj == nil or obj_name ~= self.picked_base_obj.getName() then
            -- Ignore, this is not the one we were counting distances
            return
        end

        local new_transform = nil

        picked_up_object.setVelocity({x = 0, y = 0, z = 0})
        picked_up_object.setAngularVelocity({x = 0, y = 0, z = 0})
        if g_snap_mode_enabled then
            new_transform = snap_picked_base(picked_up_object)
        else
            new_transform = calculate_transform(picked_up_object)
        end

        Logger.debug('New transform: ' .. transform_to_str(new_transform))
        Logger.debug('New picked_base_initial_transform: ' .. transform_to_str(self.picked_base_initial_transform))
        local distance =
            max_distance_between_bases(new_transform['corners'], self.picked_base_initial_transform.corners)

        if distance > 0 then
            Logger.info(string.format('Movement for %s is %s', obj_name, Utils.convert_to_units_str(distance)))

            local move = {}
            History.add_transform_to_move(move, obj_name, self.picked_base_initial_transform, new_transform)
            History.push_to_history_stack(move)
        else
            Logger.info(string.format('Movement for %s has been resetted', obj_name))
        end

        self.picked_base_obj = nil
        self.picked_base_initial_transform = nil
        Global.setVectorLines({})

        -- If its dropped it may have moved, therefore update the gizmo, in case
        -- its selected
        draw_all_gizmos()
    end

    -- This should be called periodically to check the distance of the current moved unit
    function _BasePicker:check_picked_base()
        if self.picked_base_obj and g_bases[Utils.get_original_name(self.picked_base_obj.getName())] then
            local new_corners = compute_corners_base(self.picked_base_obj)
            local distance = max_distance_between_bases(new_corners, self.picked_base_initial_transform.corners)

            UI.setAttribute('panel_current_movement', 'active', true)
            UI.setValue('text_current_movement', 'Current movement: ' .. Utils.convert_to_units_str(distance))
        else
            UI.setAttribute('panel_current_movement', 'active', false)
        end
    end

    return _BasePicker
end

return BasePicker;
